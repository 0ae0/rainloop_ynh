#!/bin/bash

app=rainloop

# Retrieve arguments
domain=$1
path=$2
is_public=$3
password=$4

# Check user parameter
sudo yunohost user list --json | grep -qi "\"username\": \"$user\"" \
	|| (echo "User does not exist: $user" && exit 1)
sudo yunohost app setting $app admin_user -v $user

# Removal of trailing /
if [ $path = "/" ]
then
	#sitename="root"
	echo "Installation on the root of the domain"
else
	# sitename == path without any "/"
	#sitename=$(echo $path | cut -d '/' -f 2)
	# Removal of trailing /
	# path can be null but not really an issue for the remaining commands
	path=${path%/}
fi

# Check domain/path availability
sudo yunohost app checkurl $domain$path -a rainloop
if [[ ! $? -eq 0 ]]; then
    exit 1
fi

# Generate random password
db_pwd=$(dd if=/dev/urandom bs=1 count=200 2> /dev/null | tr -c -d 'A-Za-z0-9' | sed -n 's/\(.\{24\}\).*/\1/p')

# Use 'rainloop' as database name and user
db_user=$app

# Initialize database and store mysql password for upgrade
sudo yunohost app initdb $db_user -p $db_pwd
sudo yunohost app setting rainloop mysqlpwd -v $db_pwd

#mysql -u $db_user -p$db_pwd $db_user < ../sources/plugins/automatic_addressbook/SQL/mysql.initial.sql

# Copy files to the right place
final_path=/var/www/$app
rainloop_path=${final_path}/app

sudo rm -rf $final_path
sudo mkdir -p $final_path
sudo mkdir -p $rainloop_path

# Use of latest community edition
sudo wget http://repository.rainloop.net/v2/webmail/rainloop-community-latest.zip -O $rainloop_path/rainloop.zip
sudo unzip $rainloop_path/rainloop.zip -d $rainloop_path/
sudo rm $rainloop_path/rainloop.zip

# Autoconfig
sudo mkdir -p $rainloop_path/data/_data_/_default_/configs/
sed -i "s@domain.tld@$domain@g" ../conf/data/configs/application.ini
sed -i "s@MYSQLUSER@db_user@g" ../conf/data/configs/application.ini
sed -i "s@MYSQLPASSWORD@$db_pwd@g" ../conf/data/configs/application.ini
if [ $(echo $LANG | cut -c1-2) == "fr" ]
then
    lang=fr
else
    lang=en
fi
sed -i "s@LANGTOCHANGE@$lang@g" ../conf/data/configs/application.ini
sudo cp ../conf/data/configs/application.ini $rainloop_path/data/_data_/_default_/configs/application.ini

# Set admin password
sed -i "s@ADMINPASSWORD@$password@g" ../conf/data/config.php
sudo php ../conf/config.php

# Add default domain configs by looping through all the domains already added
sudo mkdir -p $rainloop_path/data/_data_/_default_/domains/
sudo yunohost domain list | sed -e '1d' | while read -r line ; do
	domain=${line//- }
	sed -i "s@domain.tld@$domain@g" ../conf/data/domains/domain.tld.ini
	sudo cp ../conf/data/domains/domain.tld.ini $rainloop_path/data/_data_/_default_/domains/$domain.ini
	sed -i "s@$domain@domain.tld@g" ../conf/data/domains/domain.tld.ini
done
sudo cp ../conf/data/domains/disabled $rainloop_path/data/_data_/_default_/domains/disabled

# Hooks for domains are not implemented yet, so new domains will not be added automatically

# SSO
sed -i "s@domain.tld@$domain@g" ../conf/sso.php
sed -i "s@PATHTOCHANGE@$path@g" ../conf/sso.php
sudo cp ../conf/sso.php $final_path/index.php

# Set permissions to rainloop directory
# sudo mkdir -p $final_path/logs
sudo chown -R www-data:www-data $final_path

# Modify Nginx configuration file and copy it to Nginx conf directory
sed -i "s@PATHTOCHANGE@$path@g" ../conf/nginx.conf
sed -i "s@ALIASTOCHANGE@$final_path/@g" ../conf/nginx.conf
sed -i "s@NAMETOCHANGE@$app@g" ../conf/nginx.conf
sudo cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$app.conf

sed -i "s@NAMETOCHANGE@$app@g" ../conf/php-fpm.conf
finalphpconf=/etc/php5/fpm/pool.d/$app.conf
sudo cp ../conf/php-fpm.conf $finalphpconf
sudo chown root: $finalphpconf
sudo chmod 644 $finalphpconf

# Make app public if necessary
sudo yunohost app setting $app is_public -v "$is_public"
if [ "$is_public" = "Yes" ];
then
    sudo yunohost app setting $app skipped_uris -v "/"
fi


# Reload Nginx and regenerate SSOwat conf
sudo service php5-fpm reload
sudo service nginx reload
sudo yunohost app ssowatconf
